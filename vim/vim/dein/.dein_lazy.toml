# 非同期シンタックスチェック
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    set nocompatible
    filetype off
    let &runtimepath.=',~/.vim/bundle/ale'
    filetype plugin on

    let g:ale_sign_column_always = 1
    let g:ale_lint_on_enter = 0
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 0
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    let g:ale_open_list = 1
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
'''


# ========== Tex ==========
[[plugins]]
repo = 'vim-latex/vim-latex'
on_ft = ['tex']
hook_source = '''
    filetype plugin on
    filetype indent on
    set shellslash
    set grepprg=grep\ -nH\ $*
    let g:tex_flavor='latex'
    let g:Imap_UsePlaceHolders = 1
    let g:Imap_DeleteEmptyPlaceHolders = 1
    let g:Imap_StickyPlaceHolders = 0
    let g:Tex_DefaultTargetFormat = 'pdf'
    let g:Tex_MultipleCompileFormats='dvi,pdf'
    "let g:Tex_FormatDependency_pdf = 'pdf'
    let g:Tex_FormatDependency_pdf = 'dvi,pdf'
    "let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'
    let g:Tex_FormatDependency_ps = 'dvi,ps'
    let g:Tex_CompileRule_pdf = '/Library/TeX/texbin/ptex2pdf -u -l -ot "-synctex=1 -interaction=nonstopmode -file-line-error-style" $*'
    "let g:Tex_CompileRule_pdf = '/Library/TeX/texbin/pdflatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
    "let g:Tex_CompileRule_pdf = '/Library/TeX/texbin/lualatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
    "let g:Tex_CompileRule_pdf = '/Library/TeX/texbin/luajitlatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
    "let g:Tex_CompileRule_pdf = '/Library/TeX/texbin/xelatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
    "let g:Tex_CompileRule_pdf = '/usr/local/bin/ps2pdf $*.ps'
    let g:Tex_CompileRule_ps = '/Library/TeX/texbin/dvips -Ppdf -o $*.ps $*.dvi'
    let g:Tex_CompileRule_dvi = '/Library/TeX/texbin/uplatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
    let g:Tex_BibtexFlavor = '/Library/TeX/texbin/upbibtex'
    let g:Tex_MakeIndexFlavor = '/Library/TeX/texbin/upmendex $*.idx'
    let g:Tex_UseEditorSettingInDVIViewer = 1
    let g:Tex_ViewRule_pdf = '/usr/bin/open -a Preview.app'
    let g:Tex_AutoFolding = 0
'''


# ========== HTML - CSS ==========

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']


# ========== JavaScript + node.js ==========

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = ['javascript']
build = ['npm install -g tern']
hook_add = '''
    " Use deoplete.
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = '0'  " This do disable full signature type on autocomplete

    "Add extra filetypes
    let g:tern#filetypes = [
                    \ 'js',
                    \ 'jsx',
                    \ 'vue',
                    \ ]
'''

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']
hook_add = '''
    let g:javascript_plugin_jsdoc = 1
    let g:javascript_plugin_ngdoc = 1
'''

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['javascript']
hook_add = '''
    let g:jsx_ext_required = 0
    let g:jsx_pragma_required = 1
'''

## Color
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript']


# ========== Go ==========

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
    execute "set rtp+=" . globpath($GOPATH, "src/github.com/nsf/gocode/vim")

    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    let g:go_fmt_command = "goimports"
    let g:go_term_mode = "split"
    let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
    let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

    au FileType go nmap <leader>r <Plug>(go-run)
    au FileType go nmap <leader>b <Plug>(go-build)
    au FileType go nmap <leader>t <Plug>(go-test)
    au FileType go nmap <leader>c <Plug>(go-coverage)
    au FileType go nmap <leader>ds <Plug>(go-def-split)
    au FileType go nmap <leader>dv <Plug>(go-def-vertical)
    au FileType go nmap <leader>dt <Plug>(go-def-tab)
    au FileType go nmap <leader>gb <Plug>(go-doc-browser)
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = ['go']
depends = ['deoplete.nvim']
build = ['make']
hook_source = '''
    let g:deoplete#sources#go#gocode_binary = '~/go/bin/gocode'
    let g:deoplete#sources#go#package_dot = 1
    let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''


# ========== Ruby ==========

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby']

[[plugins]]
repo = 'fishbullet/deoplete-ruby'
on_ft = ['ruby']
depends = ['deoplete.nvim']


# ========== Plist ==========

[[plugins]]
repo = 'darfink/vim-plist'
on_ft = ['plist']

