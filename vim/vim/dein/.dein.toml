# Color Scheme
[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '¦'
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '･'

" Vim
let g:indentLine_color_term = 241

" GVim
let g:indentLine_color_gui = '#5C6370'
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'vim-denops/denops.vim'

# === ddu.vim ===

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'shun/ddu-source-rg'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
call ddu#custom#patch_global({
\   'ui': 'ff',
\   'sources': [
\     {
\       'name': 'file_rec',
\       'params': {
\         'ignoredDirectories': ['.git', 'node_modules', 'vendor', '.next']
\       }
\     }
\   ],
\   'sourceOptions': {
\     '_': {
\       'matchers': ['matcher_substring'],
\     },
\   },
\   'filterParams': {
\     'matcher_substring': {
\       'highlightMatched': 'Title',
\     },
\   },
\   'kindOptions': {
\     'file': {
\       'defaultAction': 'open',
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:true,
\       'prompt': '> ',
\       'split': 'floating',
\     }
\   },
\ })

call ddu#custom#patch_local('grep', {
\   'sourceParams' : {
\     'rg' : {
\       'args': ['--column', '--no-heading', '--color', 'never'],
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:false,
\     }
\   },
\ })


autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
    \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>

  nnoremap <buffer><silent> <Space>
    \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>

  nnoremap <buffer><silent> a
    \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>

  nnoremap <buffer><silent> p
    \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>

  nnoremap <buffer><silent> <Esc>
    \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR>
    \ <Esc><Cmd>close<CR>

  inoremap <buffer><silent> <Esc>
    \ <Esc><Cmd>close<CR>

  nnoremap <buffer><silent> <CR>
    \ <Cmd>close<CR>

  nnoremap <buffer><silent> <Esc>
    \ <Cmd>close<CR>
endfunction

nmap <silent> ;f <Cmd>call ddu#start({})<CR>
nmap <silent> ;g <Cmd>call ddu#start({
\   'name': 'grep',
\   'sources':[
\     {'name': 'rg', 'params': {'input': expand('<cword>')}}
\   ],
\ })<CR>
'''

# === ddc.vim ===

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
" Customize global settings
" Use around source.
" https://github.com/Shougo/ddc-around
call ddc#custom#patch_global('sources', ['around', 'nvim-lsp'])

call ddc#custom#patch_global('sourceOptions', {
\ '_': {
\   'matchers': ['matcher_fuzzy'],
\   'sorters': ['sorter_fuzzy'],
\   'converters': ['converter_fuzzy'],
\ },
\ 'around': {'mark': 'A'},
\ 'nvim-lsp': {
\   'mark': 'L',
\   'forceCompletionPattern': '\.\w*|:\w*|->\w*'},
\ })

call ddc#custom#patch_global('sourceParams', {
\ 'around': {'maxSize': 500},
\ })

call ddc#custom#patch_global('sourceParams', {
\ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
\ })


call ddc#custom#patch_global('completionMenu', 'pum.vim')

" Mappings

" <TAB>: completion.
inoremap <silent><expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#manual_complete()
inoremap <S-Tab>  <Cmd>call pum#map#insert_relative(-1)<CR>
imap <silent><expr> <Down>
    \ pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' :
    \ '<Down>'
imap <silent><expr><Up>
    \ pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' :
    \ '<Up>'
imap <silent><expr> <CR>
    \ pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' :
    \ '<CR>'

" Use ddc.
call ddc#enable()
'''

# === Line Theme ===

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\   'active': {
\       'left': [ ['mode', 'paste'], ['readonly', 'filename', 'modified'] ],
\       'right': [ ['lineinfo'], ['percent', 'ale'], ['fileformat', 'fileencoding', 'filetype'] ]
\   },
\   'component_function': {
\       'mode': 'LightlineMode',
\       'modified': 'LightlineModified',
\       'readonly': 'LightlineReadonly',
\       'fileencoding': 'LightlineFileencoding',
\   },
\   'component_expand': {
\       'ale': 'ALESyntaxCheck'
\   },
\   'component_type': {
\       'ale': 'error'
\   }
\ }

function! LightlineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightlineFilename()
    return expand('%:t') != '' ? expand('%:t') : '[No Name]
endfunction

function! LightlineModified()
    return &ft =~ 'help\|nerdtree' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
endfunction

function! LightlineFileencoding()
    let e1 = (&fenc != '' ? &fenc : &enc)
    let e2 = e1 != 'utf-8' ? e1 : ''
    return winwidth(0) > 70 ? e2 : ''
endfunction

function! LightlineFugitive()
    if &ft !~? 'nerdtree' && exists("*fugitive#head")
        let branch = fugitive#head()
        return branch != '' ? '⭠ '.branch : ''
    endif
    return ''
endfunction

function! ALESyntaxCheck()
    ALEGetStatusLine()
    call lightline#update()
endfunction
'''

